  
# Add the "add-apt-repository" command to Ubuntu if not present allowing "apt" to be used instead of "apt-get"
sudo apt-get install software-properties-common
________________________________
GIT...

# Install GIT
sudo apt update
sudo apt install git
git --version

# Ensure the following are installed: vim, zip, unzip, wget, curl, lsof
# If not, sudo yum install <package name>

# Update git to latest version
sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git

To see git configs: git config -l --global
Set the following:
  git config --global user.name "Smith, Tom"
  git config --global user.email "tom.smith@somewhere.com"
  git config --global color.ui true
  git config --global pull.rebase false
  git config --global core.editor vim
_________________________________
RECURSIVELY clone the dotfiles git repo...

cd ~
git clone https://github.com/godzilla8711/dotfiles.git --recursive

_________________________________
Node/NPM

# Install Node (includes npm)
curl -sSL https://deb.nodesource.com/setup_16.x | sudo bash -
sudo apt install nodejs
node --version
npm --verson (may need to restart ubuntu)

# Completely remove nodejs
sudo apt purge nodejs
sudo apt autoremove 

To see npm global config: npm config list --global
- Create folder ~/.npm-global
- Set the following:
    npm config set package-lock false
    npm config set prefix ~/.npm-global

Install global packages to support plug-ins
npm install -g eslint
npm install -g bash-language-server
npm list --depth=0 --global
_________________________________
Java (note package has jdk substring and not java substring)

sudo apt install openjdk-8-jdk
java -version

_________________________________
DOT_ files 
- Run the deploy_dot_files.sh script
_________________________________
FZF/TMUX/XMLLINT/BAT (ensure to clone dotfiles repo first)

# Install fzf binary
fzf (from command line to verify install after copying in DOT_ files)
  If not, $HOME/bin/fzf/install (answer "n" to everything)

# Install tmux
sudo apt install tmux

# Install xmllit
sudo apt install libxml2-utils

# Install bat (optional)
Download the debian package: bat_0.17.1_amd64.deb
sudo dpkg -i bat_0.17.1_amd64.deb

# Uninstall fzf/bat
$HOME/bin/fzf/uninstall
sudo dpkg -r bat
_________________________________
Postgres

# Install Postgres DB server
sudo apt install postgresql postgresql-contrib

# Start/stop Postgres DB server
sudo service postgresql start
sudo service postgresql stop
sudo service postgresql restart
sudo service postgresql --status-all | grep postgres

# Test connection (postgres account is created on installation)
sudo -u postgres psql
\q

_________________________________
ShellCheck (bash linting)

- First check if already installed by typing "shellcheck"
- If not...
    sudo apt install shellcheck
- Verify installed by typing "shellcheck" and also by vim'ing a .sh file and make an intentional typo
_________________________________
Upgrade to latest version of VIM

sudo add-apt-repository ppa:jonathonf/vim
sudo apt install vim

# Uninstall
sudo apt remove vim
sudo add-apt-repository --remove ppa:jonathonf/vim
_________________________________
CoC vim plugin and RigGrep

In vim, type the following
  :CocInstall coc-tsserver coc-json

To bring up CoC config file (once in use intellisense to get commands, e.g. add line that starts with "javascript")
  :CocConfig

To list CoC commands
  :CocList commands

Nice shortcuts: gd, K

Install ripgrep so that you can use :Rg
  curl -LO https://github.com/BurntSushi/ripgrep/releases/download/12.1.1/ripgrep_12.1.1_amd64.deb
  sudo dpkg -i ripgrep_12.1.1_amd64.deb
_________________________________
Neovim install

# Add the Personal Package Archvie (PPA) to get latest stable version
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt-get install neovim

# Have neovim use the vim config and plug-ins
mkdir -p ~/.config/nvim
cp ~/dotfiles/DOTS/DOT_init_vim ~/.config/nvim/init.vim

# Install neovim-remote (nvr)
Make sure pip3 works from command line, if not install python3
pip3 install --user neovim-remote # Don't use sudo
_________________________________
Helpful shortcuts

<space>c - Get a list of Coc commands, esc to close
<space>e - Coc explorer, ? to see all shortcutss: Ii (preview), df (delete buffer), <tab> (actions)
                         <backspace> Go up folder, <enter> go down folder
<space>ef - Coc explorer floating
<C-w>h/l - Move to different buffer
_________________________________
Solr

Ensure SOLR_HOME and JAVA_HOME are defined after running deploy dotfiles script

Start Solr web app...
  $HOME/bin/apache-solr/bin solr -p 8983
  Verify this page loads: http://hostname:8983/solr
  $HOME/bin/apache-solr/bin solr stop

Optional Solr steps...
  Install Solr as a service, this will also start it.
  sudo $SOLR_HOME/bin/install_solr_service.sh $SOLR_HOME/solr-8.7.0.zip
  OR, sudo $SOLR_HOME/bin/install_solr_service.sh $SOLR_HOME/solr-8.7.0.zip -f (if already exists as service called solr)

  Note that WSL uses the "service" command rather than "systemctl" used by ubuntu...
  sudo service solr status  # Check status of specific service
  sudo service --status-all # See all service statuses (up/+ and down/-)
  sudo service solr stop
  sudo service solr start
  sudo service solr restart

Trouble shooting...
  ps -efa | grep solr

____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________________________
apt notes (see https://techreviewpro.com/sudo-apt-get-update/)

Primary apt commands...

apt list --installed
  - List all locally installed packages

sudo apt-get update
  - Fetch the latest list of available packages from the repositories (does not affect any installed items): 

sudo apt-get install <package name>
  - Install a specific package: 
  - For multiple package installations, you can just add the package names followed by a space, like:

sudo apt-get upgrade <package name>
  - Upgrade a specific package to the latest (avoid upgrading all packages): 

sudo apt-get purge <package name>
  - Fully delete a package, including any config settings

sudo apt-get remove <package name>
  - Delete package but leave settings 


Misc apt commands...

apt-cache search <insert search term here>
  - Search for a package by name

apt-cache show <package name>
  - Show the details of a specific package

sudo apt-get build-dep <package name>
  - If you need to install the build dependencies for a package

sudo apt-get check
  - Verifies the integrity of the dependencies

sudo apt-get autoclean
  - Helps to clean up the .deb files of the packages that are no longers installed on your computer. You could utilize it to free up some space

sudo apt-get clean
  - Deletes all the packages that reside in your package cache. So, in order to install it, you need to re-download them all.

sudo apt-get autoremove 
  - Remove any unreferenced packages

